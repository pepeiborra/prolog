{-# LANGUAGE StandaloneDeriving, FlexibleContexts #-}
{-# LANGUAGE UndecidableInstances #-}
module Language.Prolog.Syntax where

type Program = [Clause]
data Clause  = Pred :- [Pred] deriving (Eq, Show)
data PredF f = Pred Atom [f] deriving (Eq, Show)
data TermF f = Term Atom [f] | Var VName deriving (Eq, Show)

data In f = In (f (In f))
deriving instance Eq (f(In f)) => Eq (In f)
deriving instance Show (f(In f)) => Show (In f)

type Pred  = PredF Term
type Term  = In TermF
data VName = VName String | Auto Int deriving (Eq, Show)
type Atom  = String

term :: Atom -> [Term] -> Term
term f = In . Term f

var :: Atom -> Term
var  = In . Var . VName